// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: tele_service.proto

#include "tele_service.pb.h"
#include "tele_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* tele_service_method_names[] = {
  "/tele_service/get_if_list",
  "/tele_service/run_capture",
  "/tele_service/get_cap_status",
  "/tele_service/get_topk_result",
};

std::unique_ptr< tele_service::Stub> tele_service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< tele_service::Stub> stub(new tele_service::Stub(channel));
  return stub;
}

tele_service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_get_if_list_(tele_service_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_run_capture_(tele_service_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_cap_status_(tele_service_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_get_topk_result_(tele_service_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status tele_service::Stub::get_if_list(::grpc::ClientContext* context, const ::empty_request& request, ::getif_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::empty_request, ::getif_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_if_list_, context, request, response);
}

void tele_service::Stub::experimental_async::get_if_list(::grpc::ClientContext* context, const ::empty_request* request, ::getif_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::empty_request, ::getif_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_if_list_, context, request, response, std::move(f));
}

void tele_service::Stub::experimental_async::get_if_list(::grpc::ClientContext* context, const ::empty_request* request, ::getif_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_if_list_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::getif_response>* tele_service::Stub::PrepareAsyncget_if_listRaw(::grpc::ClientContext* context, const ::empty_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::getif_response, ::empty_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_if_list_, context, request);
}

::grpc::ClientAsyncResponseReader< ::getif_response>* tele_service::Stub::Asyncget_if_listRaw(::grpc::ClientContext* context, const ::empty_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_if_listRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status tele_service::Stub::run_capture(::grpc::ClientContext* context, const ::run_cap_request& request, ::run_cap_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::run_cap_request, ::run_cap_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_run_capture_, context, request, response);
}

void tele_service::Stub::experimental_async::run_capture(::grpc::ClientContext* context, const ::run_cap_request* request, ::run_cap_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::run_cap_request, ::run_cap_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_run_capture_, context, request, response, std::move(f));
}

void tele_service::Stub::experimental_async::run_capture(::grpc::ClientContext* context, const ::run_cap_request* request, ::run_cap_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_run_capture_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::run_cap_response>* tele_service::Stub::PrepareAsyncrun_captureRaw(::grpc::ClientContext* context, const ::run_cap_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::run_cap_response, ::run_cap_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_run_capture_, context, request);
}

::grpc::ClientAsyncResponseReader< ::run_cap_response>* tele_service::Stub::Asyncrun_captureRaw(::grpc::ClientContext* context, const ::run_cap_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncrun_captureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status tele_service::Stub::get_cap_status(::grpc::ClientContext* context, const ::empty_request& request, ::get_cap_status_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::empty_request, ::get_cap_status_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_cap_status_, context, request, response);
}

void tele_service::Stub::experimental_async::get_cap_status(::grpc::ClientContext* context, const ::empty_request* request, ::get_cap_status_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::empty_request, ::get_cap_status_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_cap_status_, context, request, response, std::move(f));
}

void tele_service::Stub::experimental_async::get_cap_status(::grpc::ClientContext* context, const ::empty_request* request, ::get_cap_status_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_cap_status_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::get_cap_status_response>* tele_service::Stub::PrepareAsyncget_cap_statusRaw(::grpc::ClientContext* context, const ::empty_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::get_cap_status_response, ::empty_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_cap_status_, context, request);
}

::grpc::ClientAsyncResponseReader< ::get_cap_status_response>* tele_service::Stub::Asyncget_cap_statusRaw(::grpc::ClientContext* context, const ::empty_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_cap_statusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status tele_service::Stub::get_topk_result(::grpc::ClientContext* context, const ::empty_request& request, ::get_topk_result_response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::empty_request, ::get_topk_result_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_get_topk_result_, context, request, response);
}

void tele_service::Stub::experimental_async::get_topk_result(::grpc::ClientContext* context, const ::empty_request* request, ::get_topk_result_response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::empty_request, ::get_topk_result_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_topk_result_, context, request, response, std::move(f));
}

void tele_service::Stub::experimental_async::get_topk_result(::grpc::ClientContext* context, const ::empty_request* request, ::get_topk_result_response* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_get_topk_result_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::get_topk_result_response>* tele_service::Stub::PrepareAsyncget_topk_resultRaw(::grpc::ClientContext* context, const ::empty_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::get_topk_result_response, ::empty_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_get_topk_result_, context, request);
}

::grpc::ClientAsyncResponseReader< ::get_topk_result_response>* tele_service::Stub::Asyncget_topk_resultRaw(::grpc::ClientContext* context, const ::empty_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncget_topk_resultRaw(context, request, cq);
  result->StartCall();
  return result;
}

tele_service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tele_service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tele_service::Service, ::empty_request, ::getif_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](tele_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::empty_request* req,
             ::getif_response* resp) {
               return service->get_if_list(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tele_service_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tele_service::Service, ::run_cap_request, ::run_cap_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](tele_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::run_cap_request* req,
             ::run_cap_response* resp) {
               return service->run_capture(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tele_service_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tele_service::Service, ::empty_request, ::get_cap_status_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](tele_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::empty_request* req,
             ::get_cap_status_response* resp) {
               return service->get_cap_status(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      tele_service_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< tele_service::Service, ::empty_request, ::get_topk_result_response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](tele_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::empty_request* req,
             ::get_topk_result_response* resp) {
               return service->get_topk_result(ctx, req, resp);
             }, this)));
}

tele_service::Service::~Service() {
}

::grpc::Status tele_service::Service::get_if_list(::grpc::ServerContext* context, const ::empty_request* request, ::getif_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tele_service::Service::run_capture(::grpc::ServerContext* context, const ::run_cap_request* request, ::run_cap_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tele_service::Service::get_cap_status(::grpc::ServerContext* context, const ::empty_request* request, ::get_cap_status_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status tele_service::Service::get_topk_result(::grpc::ServerContext* context, const ::empty_request* request, ::get_topk_result_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


