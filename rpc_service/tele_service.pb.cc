// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tele_service.proto

#include "tele_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_tele_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_topk_result_response_topk_result_entry_tele_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_tele_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_getif_response_if_info_entry_tele_5fservice_2eproto;
class empty_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<empty_request> _instance;
} _empty_request_default_instance_;
class getif_response_if_info_entryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getif_response_if_info_entry> _instance;
} _getif_response_if_info_entry_default_instance_;
class getif_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getif_response> _instance;
} _getif_response_default_instance_;
class run_cap_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<run_cap_request> _instance;
} _run_cap_request_default_instance_;
class run_cap_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<run_cap_response> _instance;
} _run_cap_response_default_instance_;
class stop_cap_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<stop_cap_response> _instance;
} _stop_cap_response_default_instance_;
class get_cap_status_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_cap_status_response> _instance;
} _get_cap_status_response_default_instance_;
class get_topk_result_response_topk_result_entryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_topk_result_response_topk_result_entry> _instance;
} _get_topk_result_response_topk_result_entry_default_instance_;
class get_topk_result_responseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<get_topk_result_response> _instance;
} _get_topk_result_response_default_instance_;
static void InitDefaultsscc_info_empty_request_tele_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_empty_request_default_instance_;
    new (ptr) ::empty_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_empty_request_tele_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_empty_request_tele_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_get_cap_status_response_tele_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_get_cap_status_response_default_instance_;
    new (ptr) ::get_cap_status_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_cap_status_response_tele_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_cap_status_response_tele_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_get_topk_result_response_tele_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_get_topk_result_response_default_instance_;
    new (ptr) ::get_topk_result_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_get_topk_result_response_tele_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_get_topk_result_response_tele_5fservice_2eproto}, {
      &scc_info_get_topk_result_response_topk_result_entry_tele_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_get_topk_result_response_topk_result_entry_tele_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_get_topk_result_response_topk_result_entry_default_instance_;
    new (ptr) ::get_topk_result_response_topk_result_entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_get_topk_result_response_topk_result_entry_tele_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_get_topk_result_response_topk_result_entry_tele_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_getif_response_tele_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_getif_response_default_instance_;
    new (ptr) ::getif_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getif_response_tele_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_getif_response_tele_5fservice_2eproto}, {
      &scc_info_getif_response_if_info_entry_tele_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_getif_response_if_info_entry_tele_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_getif_response_if_info_entry_default_instance_;
    new (ptr) ::getif_response_if_info_entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_getif_response_if_info_entry_tele_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_getif_response_if_info_entry_tele_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_run_cap_request_tele_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_run_cap_request_default_instance_;
    new (ptr) ::run_cap_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_run_cap_request_tele_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_run_cap_request_tele_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_run_cap_response_tele_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_run_cap_response_default_instance_;
    new (ptr) ::run_cap_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_run_cap_response_tele_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_run_cap_response_tele_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_stop_cap_response_tele_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_stop_cap_response_default_instance_;
    new (ptr) ::stop_cap_response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_stop_cap_response_tele_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_stop_cap_response_tele_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tele_5fservice_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tele_5fservice_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tele_5fservice_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_tele_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::empty_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::empty_request, protocol_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::getif_response_if_info_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::getif_response_if_info_entry, if_name_),
  PROTOBUF_FIELD_OFFSET(::getif_response_if_info_entry, if_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::getif_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::getif_response, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::getif_response, interface_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::run_cap_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::run_cap_request, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::run_cap_request, if_name_),
  PROTOBUF_FIELD_OFFSET(::run_cap_request, pkt_count_),
  PROTOBUF_FIELD_OFFSET(::run_cap_request, k_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::run_cap_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::run_cap_response, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::run_cap_response, is_started_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stop_cap_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::stop_cap_response, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::stop_cap_response, is_stopped_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::get_cap_status_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::get_cap_status_response, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::get_cap_status_response, is_finished_),
  PROTOBUF_FIELD_OFFSET(::get_cap_status_response, captured_pkt_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::get_topk_result_response_topk_result_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::get_topk_result_response_topk_result_entry, id_),
  PROTOBUF_FIELD_OFFSET(::get_topk_result_response_topk_result_entry, flow_description_),
  PROTOBUF_FIELD_OFFSET(::get_topk_result_response_topk_result_entry, flow_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::get_topk_result_response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::get_topk_result_response, protocol_version_),
  PROTOBUF_FIELD_OFFSET(::get_topk_result_response, is_finished_),
  PROTOBUF_FIELD_OFFSET(::get_topk_result_response, topk_results_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::empty_request)},
  { 6, -1, sizeof(::getif_response_if_info_entry)},
  { 13, -1, sizeof(::getif_response)},
  { 20, -1, sizeof(::run_cap_request)},
  { 29, -1, sizeof(::run_cap_response)},
  { 36, -1, sizeof(::stop_cap_response)},
  { 43, -1, sizeof(::get_cap_status_response)},
  { 51, -1, sizeof(::get_topk_result_response_topk_result_entry)},
  { 59, -1, sizeof(::get_topk_result_response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_empty_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_getif_response_if_info_entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_getif_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_run_cap_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_run_cap_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_stop_cap_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_get_cap_status_response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_get_topk_result_response_topk_result_entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_get_topk_result_response_default_instance_),
};

const char descriptor_table_protodef_tele_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022tele_service.proto\")\n\rempty_request\022\030\n"
  "\020protocol_version\030\001 \001(\t\"\233\001\n\016getif_respon"
  "se\022\030\n\020protocol_version\030\001 \001(\t\0225\n\016interfac"
  "e_list\030\002 \003(\0132\035.getif_response.if_info_en"
  "try\0328\n\rif_info_entry\022\017\n\007if_name\030\001 \001(\t\022\026\n"
  "\016if_description\030\002 \001(\t\"Z\n\017run_cap_request"
  "\022\030\n\020protocol_version\030\001 \001(\t\022\017\n\007if_name\030\002 "
  "\001(\t\022\021\n\tpkt_count\030\003 \001(\003\022\t\n\001k\030\004 \001(\005\"@\n\020run"
  "_cap_response\022\030\n\020protocol_version\030\001 \001(\t\022"
  "\022\n\nis_started\030\002 \001(\010\"A\n\021stop_cap_response"
  "\022\030\n\020protocol_version\030\001 \001(\t\022\022\n\nis_stopped"
  "\030\002 \001(\010\"d\n\027get_cap_status_response\022\030\n\020pro"
  "tocol_version\030\001 \001(\t\022\023\n\013is_finished\030\002 \001(\010"
  "\022\032\n\022captured_pkt_count\030\003 \001(\003\"\333\001\n\030get_top"
  "k_result_response\022\030\n\020protocol_version\030\001 "
  "\001(\t\022\023\n\013is_finished\030\002 \001(\010\022A\n\014topk_results"
  "\030\003 \003(\0132+.get_topk_result_response.topk_r"
  "esult_entry\032M\n\021topk_result_entry\022\n\n\002id\030\001"
  " \001(\005\022\030\n\020flow_description\030\002 \001(\t\022\022\n\nflow_c"
  "ount\030\003 \001(\0032\240\002\n\014tele_service\022.\n\013get_if_li"
  "st\022\016.empty_request\032\017.getif_response\0222\n\013r"
  "un_capture\022\020.run_cap_request\032\021.run_cap_r"
  "esponse\0222\n\014stop_capture\022\016.empty_request\032"
  "\022.stop_cap_response\022:\n\016get_cap_status\022\016."
  "empty_request\032\030.get_cap_status_response\022"
  "<\n\017get_topk_result\022\016.empty_request\032\031.get"
  "_topk_result_responseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_tele_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_tele_5fservice_2eproto_sccs[9] = {
  &scc_info_empty_request_tele_5fservice_2eproto.base,
  &scc_info_get_cap_status_response_tele_5fservice_2eproto.base,
  &scc_info_get_topk_result_response_tele_5fservice_2eproto.base,
  &scc_info_get_topk_result_response_topk_result_entry_tele_5fservice_2eproto.base,
  &scc_info_getif_response_tele_5fservice_2eproto.base,
  &scc_info_getif_response_if_info_entry_tele_5fservice_2eproto.base,
  &scc_info_run_cap_request_tele_5fservice_2eproto.base,
  &scc_info_run_cap_response_tele_5fservice_2eproto.base,
  &scc_info_stop_cap_response_tele_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tele_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tele_5fservice_2eproto = {
  false, false, descriptor_table_protodef_tele_5fservice_2eproto, "tele_service.proto", 1069,
  &descriptor_table_tele_5fservice_2eproto_once, descriptor_table_tele_5fservice_2eproto_sccs, descriptor_table_tele_5fservice_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_tele_5fservice_2eproto::offsets,
  file_level_metadata_tele_5fservice_2eproto, 9, file_level_enum_descriptors_tele_5fservice_2eproto, file_level_service_descriptors_tele_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_tele_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_tele_5fservice_2eproto)), true);

// ===================================================================

class empty_request::_Internal {
 public:
};

empty_request::empty_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:empty_request)
}
empty_request::empty_request(const empty_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_version().empty()) {
    protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_version(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:empty_request)
}

void empty_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_empty_request_tele_5fservice_2eproto.base);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

empty_request::~empty_request() {
  // @@protoc_insertion_point(destructor:empty_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void empty_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void empty_request::ArenaDtor(void* object) {
  empty_request* _this = reinterpret_cast< empty_request* >(object);
  (void)_this;
}
void empty_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void empty_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const empty_request& empty_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_empty_request_tele_5fservice_2eproto.base);
  return *internal_default_instance();
}


void empty_request::Clear() {
// @@protoc_insertion_point(message_clear_start:empty_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* empty_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "empty_request.protocol_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* empty_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:empty_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_version().data(), static_cast<int>(this->_internal_protocol_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "empty_request.protocol_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:empty_request)
  return target;
}

size_t empty_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:empty_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void empty_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:empty_request)
  GOOGLE_DCHECK_NE(&from, this);
  const empty_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<empty_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:empty_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:empty_request)
    MergeFrom(*source);
  }
}

void empty_request::MergeFrom(const empty_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:empty_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol_version().size() > 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
}

void empty_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:empty_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void empty_request::CopyFrom(const empty_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:empty_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool empty_request::IsInitialized() const {
  return true;
}

void empty_request::InternalSwap(empty_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_version_.Swap(&other->protocol_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata empty_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getif_response_if_info_entry::_Internal {
 public:
};

getif_response_if_info_entry::getif_response_if_info_entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:getif_response.if_info_entry)
}
getif_response_if_info_entry::getif_response_if_info_entry(const getif_response_if_info_entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_if_name().empty()) {
    if_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_if_name(), 
      GetArena());
  }
  if_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_if_description().empty()) {
    if_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_if_description(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:getif_response.if_info_entry)
}

void getif_response_if_info_entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getif_response_if_info_entry_tele_5fservice_2eproto.base);
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

getif_response_if_info_entry::~getif_response_if_info_entry() {
  // @@protoc_insertion_point(destructor:getif_response.if_info_entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getif_response_if_info_entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getif_response_if_info_entry::ArenaDtor(void* object) {
  getif_response_if_info_entry* _this = reinterpret_cast< getif_response_if_info_entry* >(object);
  (void)_this;
}
void getif_response_if_info_entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getif_response_if_info_entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getif_response_if_info_entry& getif_response_if_info_entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getif_response_if_info_entry_tele_5fservice_2eproto.base);
  return *internal_default_instance();
}


void getif_response_if_info_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:getif_response.if_info_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if_name_.ClearToEmpty();
  if_description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getif_response_if_info_entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string if_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_if_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "getif_response.if_info_entry.if_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string if_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_if_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "getif_response.if_info_entry.if_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getif_response_if_info_entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:getif_response.if_info_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string if_name = 1;
  if (this->if_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_if_name().data(), static_cast<int>(this->_internal_if_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "getif_response.if_info_entry.if_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_if_name(), target);
  }

  // string if_description = 2;
  if (this->if_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_if_description().data(), static_cast<int>(this->_internal_if_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "getif_response.if_info_entry.if_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_if_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:getif_response.if_info_entry)
  return target;
}

size_t getif_response_if_info_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:getif_response.if_info_entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string if_name = 1;
  if (this->if_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_if_name());
  }

  // string if_description = 2;
  if (this->if_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_if_description());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getif_response_if_info_entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:getif_response.if_info_entry)
  GOOGLE_DCHECK_NE(&from, this);
  const getif_response_if_info_entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getif_response_if_info_entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:getif_response.if_info_entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:getif_response.if_info_entry)
    MergeFrom(*source);
  }
}

void getif_response_if_info_entry::MergeFrom(const getif_response_if_info_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:getif_response.if_info_entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.if_name().size() > 0) {
    _internal_set_if_name(from._internal_if_name());
  }
  if (from.if_description().size() > 0) {
    _internal_set_if_description(from._internal_if_description());
  }
}

void getif_response_if_info_entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:getif_response.if_info_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getif_response_if_info_entry::CopyFrom(const getif_response_if_info_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:getif_response.if_info_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getif_response_if_info_entry::IsInitialized() const {
  return true;
}

void getif_response_if_info_entry::InternalSwap(getif_response_if_info_entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  if_name_.Swap(&other->if_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if_description_.Swap(&other->if_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata getif_response_if_info_entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class getif_response::_Internal {
 public:
};

getif_response::getif_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  interface_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:getif_response)
}
getif_response::getif_response(const getif_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interface_list_(from.interface_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_version().empty()) {
    protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_version(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:getif_response)
}

void getif_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getif_response_tele_5fservice_2eproto.base);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

getif_response::~getif_response() {
  // @@protoc_insertion_point(destructor:getif_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void getif_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void getif_response::ArenaDtor(void* object) {
  getif_response* _this = reinterpret_cast< getif_response* >(object);
  (void)_this;
}
void getif_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void getif_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getif_response& getif_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getif_response_tele_5fservice_2eproto.base);
  return *internal_default_instance();
}


void getif_response::Clear() {
// @@protoc_insertion_point(message_clear_start:getif_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interface_list_.Clear();
  protocol_version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* getif_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "getif_response.protocol_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .getif_response.if_info_entry interface_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interface_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* getif_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:getif_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_version().data(), static_cast<int>(this->_internal_protocol_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "getif_response.protocol_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol_version(), target);
  }

  // repeated .getif_response.if_info_entry interface_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interface_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_interface_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:getif_response)
  return target;
}

size_t getif_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:getif_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .getif_response.if_info_entry interface_list = 2;
  total_size += 1UL * this->_internal_interface_list_size();
  for (const auto& msg : this->interface_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getif_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:getif_response)
  GOOGLE_DCHECK_NE(&from, this);
  const getif_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getif_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:getif_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:getif_response)
    MergeFrom(*source);
  }
}

void getif_response::MergeFrom(const getif_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:getif_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  interface_list_.MergeFrom(from.interface_list_);
  if (from.protocol_version().size() > 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
}

void getif_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:getif_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getif_response::CopyFrom(const getif_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:getif_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getif_response::IsInitialized() const {
  return true;
}

void getif_response::InternalSwap(getif_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  interface_list_.InternalSwap(&other->interface_list_);
  protocol_version_.Swap(&other->protocol_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata getif_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class run_cap_request::_Internal {
 public:
};

run_cap_request::run_cap_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:run_cap_request)
}
run_cap_request::run_cap_request(const run_cap_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_version().empty()) {
    protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_version(), 
      GetArena());
  }
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_if_name().empty()) {
    if_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_if_name(), 
      GetArena());
  }
  ::memcpy(&pkt_count_, &from.pkt_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&k_) -
    reinterpret_cast<char*>(&pkt_count_)) + sizeof(k_));
  // @@protoc_insertion_point(copy_constructor:run_cap_request)
}

void run_cap_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_run_cap_request_tele_5fservice_2eproto.base);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pkt_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&k_) -
      reinterpret_cast<char*>(&pkt_count_)) + sizeof(k_));
}

run_cap_request::~run_cap_request() {
  // @@protoc_insertion_point(destructor:run_cap_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void run_cap_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void run_cap_request::ArenaDtor(void* object) {
  run_cap_request* _this = reinterpret_cast< run_cap_request* >(object);
  (void)_this;
}
void run_cap_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void run_cap_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const run_cap_request& run_cap_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_run_cap_request_tele_5fservice_2eproto.base);
  return *internal_default_instance();
}


void run_cap_request::Clear() {
// @@protoc_insertion_point(message_clear_start:run_cap_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_version_.ClearToEmpty();
  if_name_.ClearToEmpty();
  ::memset(&pkt_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&k_) -
      reinterpret_cast<char*>(&pkt_count_)) + sizeof(k_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* run_cap_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "run_cap_request.protocol_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string if_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_if_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "run_cap_request.if_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 pkt_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          pkt_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 k = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* run_cap_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:run_cap_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_version().data(), static_cast<int>(this->_internal_protocol_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "run_cap_request.protocol_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol_version(), target);
  }

  // string if_name = 2;
  if (this->if_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_if_name().data(), static_cast<int>(this->_internal_if_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "run_cap_request.if_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_if_name(), target);
  }

  // int64 pkt_count = 3;
  if (this->pkt_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_pkt_count(), target);
  }

  // int32 k = 4;
  if (this->k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_k(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:run_cap_request)
  return target;
}

size_t run_cap_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:run_cap_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_version());
  }

  // string if_name = 2;
  if (this->if_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_if_name());
  }

  // int64 pkt_count = 3;
  if (this->pkt_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_pkt_count());
  }

  // int32 k = 4;
  if (this->k() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_k());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void run_cap_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:run_cap_request)
  GOOGLE_DCHECK_NE(&from, this);
  const run_cap_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<run_cap_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:run_cap_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:run_cap_request)
    MergeFrom(*source);
  }
}

void run_cap_request::MergeFrom(const run_cap_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:run_cap_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol_version().size() > 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
  if (from.if_name().size() > 0) {
    _internal_set_if_name(from._internal_if_name());
  }
  if (from.pkt_count() != 0) {
    _internal_set_pkt_count(from._internal_pkt_count());
  }
  if (from.k() != 0) {
    _internal_set_k(from._internal_k());
  }
}

void run_cap_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:run_cap_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void run_cap_request::CopyFrom(const run_cap_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:run_cap_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool run_cap_request::IsInitialized() const {
  return true;
}

void run_cap_request::InternalSwap(run_cap_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_version_.Swap(&other->protocol_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if_name_.Swap(&other->if_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(run_cap_request, k_)
      + sizeof(run_cap_request::k_)
      - PROTOBUF_FIELD_OFFSET(run_cap_request, pkt_count_)>(
          reinterpret_cast<char*>(&pkt_count_),
          reinterpret_cast<char*>(&other->pkt_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata run_cap_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class run_cap_response::_Internal {
 public:
};

run_cap_response::run_cap_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:run_cap_response)
}
run_cap_response::run_cap_response(const run_cap_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_version().empty()) {
    protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_version(), 
      GetArena());
  }
  is_started_ = from.is_started_;
  // @@protoc_insertion_point(copy_constructor:run_cap_response)
}

void run_cap_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_run_cap_response_tele_5fservice_2eproto.base);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_started_ = false;
}

run_cap_response::~run_cap_response() {
  // @@protoc_insertion_point(destructor:run_cap_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void run_cap_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void run_cap_response::ArenaDtor(void* object) {
  run_cap_response* _this = reinterpret_cast< run_cap_response* >(object);
  (void)_this;
}
void run_cap_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void run_cap_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const run_cap_response& run_cap_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_run_cap_response_tele_5fservice_2eproto.base);
  return *internal_default_instance();
}


void run_cap_response::Clear() {
// @@protoc_insertion_point(message_clear_start:run_cap_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_version_.ClearToEmpty();
  is_started_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* run_cap_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "run_cap_response.protocol_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_started = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_started_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* run_cap_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:run_cap_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_version().data(), static_cast<int>(this->_internal_protocol_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "run_cap_response.protocol_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol_version(), target);
  }

  // bool is_started = 2;
  if (this->is_started() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_started(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:run_cap_response)
  return target;
}

size_t run_cap_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:run_cap_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_version());
  }

  // bool is_started = 2;
  if (this->is_started() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void run_cap_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:run_cap_response)
  GOOGLE_DCHECK_NE(&from, this);
  const run_cap_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<run_cap_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:run_cap_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:run_cap_response)
    MergeFrom(*source);
  }
}

void run_cap_response::MergeFrom(const run_cap_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:run_cap_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol_version().size() > 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
  if (from.is_started() != 0) {
    _internal_set_is_started(from._internal_is_started());
  }
}

void run_cap_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:run_cap_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void run_cap_response::CopyFrom(const run_cap_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:run_cap_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool run_cap_response::IsInitialized() const {
  return true;
}

void run_cap_response::InternalSwap(run_cap_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_version_.Swap(&other->protocol_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_started_, other->is_started_);
}

::PROTOBUF_NAMESPACE_ID::Metadata run_cap_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class stop_cap_response::_Internal {
 public:
};

stop_cap_response::stop_cap_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:stop_cap_response)
}
stop_cap_response::stop_cap_response(const stop_cap_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_version().empty()) {
    protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_version(), 
      GetArena());
  }
  is_stopped_ = from.is_stopped_;
  // @@protoc_insertion_point(copy_constructor:stop_cap_response)
}

void stop_cap_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_stop_cap_response_tele_5fservice_2eproto.base);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_stopped_ = false;
}

stop_cap_response::~stop_cap_response() {
  // @@protoc_insertion_point(destructor:stop_cap_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void stop_cap_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void stop_cap_response::ArenaDtor(void* object) {
  stop_cap_response* _this = reinterpret_cast< stop_cap_response* >(object);
  (void)_this;
}
void stop_cap_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void stop_cap_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const stop_cap_response& stop_cap_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_stop_cap_response_tele_5fservice_2eproto.base);
  return *internal_default_instance();
}


void stop_cap_response::Clear() {
// @@protoc_insertion_point(message_clear_start:stop_cap_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_version_.ClearToEmpty();
  is_stopped_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* stop_cap_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "stop_cap_response.protocol_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_stopped = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_stopped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* stop_cap_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stop_cap_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_version().data(), static_cast<int>(this->_internal_protocol_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stop_cap_response.protocol_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol_version(), target);
  }

  // bool is_stopped = 2;
  if (this->is_stopped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_stopped(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stop_cap_response)
  return target;
}

size_t stop_cap_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stop_cap_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_version());
  }

  // bool is_stopped = 2;
  if (this->is_stopped() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void stop_cap_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:stop_cap_response)
  GOOGLE_DCHECK_NE(&from, this);
  const stop_cap_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<stop_cap_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:stop_cap_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:stop_cap_response)
    MergeFrom(*source);
  }
}

void stop_cap_response::MergeFrom(const stop_cap_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stop_cap_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol_version().size() > 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
  if (from.is_stopped() != 0) {
    _internal_set_is_stopped(from._internal_is_stopped());
  }
}

void stop_cap_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:stop_cap_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stop_cap_response::CopyFrom(const stop_cap_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stop_cap_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stop_cap_response::IsInitialized() const {
  return true;
}

void stop_cap_response::InternalSwap(stop_cap_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_version_.Swap(&other->protocol_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_stopped_, other->is_stopped_);
}

::PROTOBUF_NAMESPACE_ID::Metadata stop_cap_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_cap_status_response::_Internal {
 public:
};

get_cap_status_response::get_cap_status_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:get_cap_status_response)
}
get_cap_status_response::get_cap_status_response(const get_cap_status_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_version().empty()) {
    protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_version(), 
      GetArena());
  }
  ::memcpy(&captured_pkt_count_, &from.captured_pkt_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_finished_) -
    reinterpret_cast<char*>(&captured_pkt_count_)) + sizeof(is_finished_));
  // @@protoc_insertion_point(copy_constructor:get_cap_status_response)
}

void get_cap_status_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_cap_status_response_tele_5fservice_2eproto.base);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&captured_pkt_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_finished_) -
      reinterpret_cast<char*>(&captured_pkt_count_)) + sizeof(is_finished_));
}

get_cap_status_response::~get_cap_status_response() {
  // @@protoc_insertion_point(destructor:get_cap_status_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_cap_status_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_cap_status_response::ArenaDtor(void* object) {
  get_cap_status_response* _this = reinterpret_cast< get_cap_status_response* >(object);
  (void)_this;
}
void get_cap_status_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_cap_status_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_cap_status_response& get_cap_status_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_cap_status_response_tele_5fservice_2eproto.base);
  return *internal_default_instance();
}


void get_cap_status_response::Clear() {
// @@protoc_insertion_point(message_clear_start:get_cap_status_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_version_.ClearToEmpty();
  ::memset(&captured_pkt_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_finished_) -
      reinterpret_cast<char*>(&captured_pkt_count_)) + sizeof(is_finished_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_cap_status_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "get_cap_status_response.protocol_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_finished = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 captured_pkt_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          captured_pkt_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_cap_status_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:get_cap_status_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_version().data(), static_cast<int>(this->_internal_protocol_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "get_cap_status_response.protocol_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol_version(), target);
  }

  // bool is_finished = 2;
  if (this->is_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_finished(), target);
  }

  // int64 captured_pkt_count = 3;
  if (this->captured_pkt_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_captured_pkt_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:get_cap_status_response)
  return target;
}

size_t get_cap_status_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:get_cap_status_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_version());
  }

  // int64 captured_pkt_count = 3;
  if (this->captured_pkt_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_captured_pkt_count());
  }

  // bool is_finished = 2;
  if (this->is_finished() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_cap_status_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:get_cap_status_response)
  GOOGLE_DCHECK_NE(&from, this);
  const get_cap_status_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_cap_status_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:get_cap_status_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:get_cap_status_response)
    MergeFrom(*source);
  }
}

void get_cap_status_response::MergeFrom(const get_cap_status_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:get_cap_status_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol_version().size() > 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
  if (from.captured_pkt_count() != 0) {
    _internal_set_captured_pkt_count(from._internal_captured_pkt_count());
  }
  if (from.is_finished() != 0) {
    _internal_set_is_finished(from._internal_is_finished());
  }
}

void get_cap_status_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:get_cap_status_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_cap_status_response::CopyFrom(const get_cap_status_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:get_cap_status_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_cap_status_response::IsInitialized() const {
  return true;
}

void get_cap_status_response::InternalSwap(get_cap_status_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_version_.Swap(&other->protocol_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_cap_status_response, is_finished_)
      + sizeof(get_cap_status_response::is_finished_)
      - PROTOBUF_FIELD_OFFSET(get_cap_status_response, captured_pkt_count_)>(
          reinterpret_cast<char*>(&captured_pkt_count_),
          reinterpret_cast<char*>(&other->captured_pkt_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_cap_status_response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_topk_result_response_topk_result_entry::_Internal {
 public:
};

get_topk_result_response_topk_result_entry::get_topk_result_response_topk_result_entry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:get_topk_result_response.topk_result_entry)
}
get_topk_result_response_topk_result_entry::get_topk_result_response_topk_result_entry(const get_topk_result_response_topk_result_entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flow_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_flow_description().empty()) {
    flow_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_flow_description(), 
      GetArena());
  }
  ::memcpy(&flow_count_, &from.flow_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&flow_count_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:get_topk_result_response.topk_result_entry)
}

void get_topk_result_response_topk_result_entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_topk_result_response_topk_result_entry_tele_5fservice_2eproto.base);
  flow_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&flow_count_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&flow_count_)) + sizeof(id_));
}

get_topk_result_response_topk_result_entry::~get_topk_result_response_topk_result_entry() {
  // @@protoc_insertion_point(destructor:get_topk_result_response.topk_result_entry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_topk_result_response_topk_result_entry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  flow_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_topk_result_response_topk_result_entry::ArenaDtor(void* object) {
  get_topk_result_response_topk_result_entry* _this = reinterpret_cast< get_topk_result_response_topk_result_entry* >(object);
  (void)_this;
}
void get_topk_result_response_topk_result_entry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_topk_result_response_topk_result_entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_topk_result_response_topk_result_entry& get_topk_result_response_topk_result_entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_topk_result_response_topk_result_entry_tele_5fservice_2eproto.base);
  return *internal_default_instance();
}


void get_topk_result_response_topk_result_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:get_topk_result_response.topk_result_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flow_description_.ClearToEmpty();
  ::memset(&flow_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&flow_count_)) + sizeof(id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_topk_result_response_topk_result_entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string flow_description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_flow_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "get_topk_result_response.topk_result_entry.flow_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 flow_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flow_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_topk_result_response_topk_result_entry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:get_topk_result_response.topk_result_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string flow_description = 2;
  if (this->flow_description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flow_description().data(), static_cast<int>(this->_internal_flow_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "get_topk_result_response.topk_result_entry.flow_description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_flow_description(), target);
  }

  // int64 flow_count = 3;
  if (this->flow_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_flow_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:get_topk_result_response.topk_result_entry)
  return target;
}

size_t get_topk_result_response_topk_result_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:get_topk_result_response.topk_result_entry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string flow_description = 2;
  if (this->flow_description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flow_description());
  }

  // int64 flow_count = 3;
  if (this->flow_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_flow_count());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_topk_result_response_topk_result_entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:get_topk_result_response.topk_result_entry)
  GOOGLE_DCHECK_NE(&from, this);
  const get_topk_result_response_topk_result_entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_topk_result_response_topk_result_entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:get_topk_result_response.topk_result_entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:get_topk_result_response.topk_result_entry)
    MergeFrom(*source);
  }
}

void get_topk_result_response_topk_result_entry::MergeFrom(const get_topk_result_response_topk_result_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:get_topk_result_response.topk_result_entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flow_description().size() > 0) {
    _internal_set_flow_description(from._internal_flow_description());
  }
  if (from.flow_count() != 0) {
    _internal_set_flow_count(from._internal_flow_count());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void get_topk_result_response_topk_result_entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:get_topk_result_response.topk_result_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_topk_result_response_topk_result_entry::CopyFrom(const get_topk_result_response_topk_result_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:get_topk_result_response.topk_result_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_topk_result_response_topk_result_entry::IsInitialized() const {
  return true;
}

void get_topk_result_response_topk_result_entry::InternalSwap(get_topk_result_response_topk_result_entry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  flow_description_.Swap(&other->flow_description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(get_topk_result_response_topk_result_entry, id_)
      + sizeof(get_topk_result_response_topk_result_entry::id_)
      - PROTOBUF_FIELD_OFFSET(get_topk_result_response_topk_result_entry, flow_count_)>(
          reinterpret_cast<char*>(&flow_count_),
          reinterpret_cast<char*>(&other->flow_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata get_topk_result_response_topk_result_entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class get_topk_result_response::_Internal {
 public:
};

get_topk_result_response::get_topk_result_response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  topk_results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:get_topk_result_response)
}
get_topk_result_response::get_topk_result_response(const get_topk_result_response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      topk_results_(from.topk_results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol_version().empty()) {
    protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_protocol_version(), 
      GetArena());
  }
  is_finished_ = from.is_finished_;
  // @@protoc_insertion_point(copy_constructor:get_topk_result_response)
}

void get_topk_result_response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_get_topk_result_response_tele_5fservice_2eproto.base);
  protocol_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_finished_ = false;
}

get_topk_result_response::~get_topk_result_response() {
  // @@protoc_insertion_point(destructor:get_topk_result_response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void get_topk_result_response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void get_topk_result_response::ArenaDtor(void* object) {
  get_topk_result_response* _this = reinterpret_cast< get_topk_result_response* >(object);
  (void)_this;
}
void get_topk_result_response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void get_topk_result_response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const get_topk_result_response& get_topk_result_response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_get_topk_result_response_tele_5fservice_2eproto.base);
  return *internal_default_instance();
}


void get_topk_result_response::Clear() {
// @@protoc_insertion_point(message_clear_start:get_topk_result_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topk_results_.Clear();
  protocol_version_.ClearToEmpty();
  is_finished_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* get_topk_result_response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string protocol_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_protocol_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "get_topk_result_response.protocol_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_finished = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_finished_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .get_topk_result_response.topk_result_entry topk_results = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topk_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* get_topk_result_response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:get_topk_result_response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol_version().data(), static_cast<int>(this->_internal_protocol_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "get_topk_result_response.protocol_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_protocol_version(), target);
  }

  // bool is_finished = 2;
  if (this->is_finished() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_finished(), target);
  }

  // repeated .get_topk_result_response.topk_result_entry topk_results = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_topk_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_topk_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:get_topk_result_response)
  return target;
}

size_t get_topk_result_response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:get_topk_result_response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .get_topk_result_response.topk_result_entry topk_results = 3;
  total_size += 1UL * this->_internal_topk_results_size();
  for (const auto& msg : this->topk_results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string protocol_version = 1;
  if (this->protocol_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol_version());
  }

  // bool is_finished = 2;
  if (this->is_finished() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void get_topk_result_response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:get_topk_result_response)
  GOOGLE_DCHECK_NE(&from, this);
  const get_topk_result_response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<get_topk_result_response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:get_topk_result_response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:get_topk_result_response)
    MergeFrom(*source);
  }
}

void get_topk_result_response::MergeFrom(const get_topk_result_response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:get_topk_result_response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topk_results_.MergeFrom(from.topk_results_);
  if (from.protocol_version().size() > 0) {
    _internal_set_protocol_version(from._internal_protocol_version());
  }
  if (from.is_finished() != 0) {
    _internal_set_is_finished(from._internal_is_finished());
  }
}

void get_topk_result_response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:get_topk_result_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void get_topk_result_response::CopyFrom(const get_topk_result_response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:get_topk_result_response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool get_topk_result_response::IsInitialized() const {
  return true;
}

void get_topk_result_response::InternalSwap(get_topk_result_response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  topk_results_.InternalSwap(&other->topk_results_);
  protocol_version_.Swap(&other->protocol_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_finished_, other->is_finished_);
}

::PROTOBUF_NAMESPACE_ID::Metadata get_topk_result_response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::empty_request* Arena::CreateMaybeMessage< ::empty_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::empty_request >(arena);
}
template<> PROTOBUF_NOINLINE ::getif_response_if_info_entry* Arena::CreateMaybeMessage< ::getif_response_if_info_entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::getif_response_if_info_entry >(arena);
}
template<> PROTOBUF_NOINLINE ::getif_response* Arena::CreateMaybeMessage< ::getif_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::getif_response >(arena);
}
template<> PROTOBUF_NOINLINE ::run_cap_request* Arena::CreateMaybeMessage< ::run_cap_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::run_cap_request >(arena);
}
template<> PROTOBUF_NOINLINE ::run_cap_response* Arena::CreateMaybeMessage< ::run_cap_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::run_cap_response >(arena);
}
template<> PROTOBUF_NOINLINE ::stop_cap_response* Arena::CreateMaybeMessage< ::stop_cap_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stop_cap_response >(arena);
}
template<> PROTOBUF_NOINLINE ::get_cap_status_response* Arena::CreateMaybeMessage< ::get_cap_status_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::get_cap_status_response >(arena);
}
template<> PROTOBUF_NOINLINE ::get_topk_result_response_topk_result_entry* Arena::CreateMaybeMessage< ::get_topk_result_response_topk_result_entry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::get_topk_result_response_topk_result_entry >(arena);
}
template<> PROTOBUF_NOINLINE ::get_topk_result_response* Arena::CreateMaybeMessage< ::get_topk_result_response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::get_topk_result_response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
