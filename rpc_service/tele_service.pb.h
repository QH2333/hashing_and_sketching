// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tele_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tele_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tele_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tele_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tele_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tele_5fservice_2eproto;
class empty_request;
class empty_requestDefaultTypeInternal;
extern empty_requestDefaultTypeInternal _empty_request_default_instance_;
class get_cap_status_response;
class get_cap_status_responseDefaultTypeInternal;
extern get_cap_status_responseDefaultTypeInternal _get_cap_status_response_default_instance_;
class get_topk_result_response;
class get_topk_result_responseDefaultTypeInternal;
extern get_topk_result_responseDefaultTypeInternal _get_topk_result_response_default_instance_;
class get_topk_result_response_topk_result_entry;
class get_topk_result_response_topk_result_entryDefaultTypeInternal;
extern get_topk_result_response_topk_result_entryDefaultTypeInternal _get_topk_result_response_topk_result_entry_default_instance_;
class getif_response;
class getif_responseDefaultTypeInternal;
extern getif_responseDefaultTypeInternal _getif_response_default_instance_;
class getif_response_if_info_entry;
class getif_response_if_info_entryDefaultTypeInternal;
extern getif_response_if_info_entryDefaultTypeInternal _getif_response_if_info_entry_default_instance_;
class run_cap_request;
class run_cap_requestDefaultTypeInternal;
extern run_cap_requestDefaultTypeInternal _run_cap_request_default_instance_;
class run_cap_response;
class run_cap_responseDefaultTypeInternal;
extern run_cap_responseDefaultTypeInternal _run_cap_response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::empty_request* Arena::CreateMaybeMessage<::empty_request>(Arena*);
template<> ::get_cap_status_response* Arena::CreateMaybeMessage<::get_cap_status_response>(Arena*);
template<> ::get_topk_result_response* Arena::CreateMaybeMessage<::get_topk_result_response>(Arena*);
template<> ::get_topk_result_response_topk_result_entry* Arena::CreateMaybeMessage<::get_topk_result_response_topk_result_entry>(Arena*);
template<> ::getif_response* Arena::CreateMaybeMessage<::getif_response>(Arena*);
template<> ::getif_response_if_info_entry* Arena::CreateMaybeMessage<::getif_response_if_info_entry>(Arena*);
template<> ::run_cap_request* Arena::CreateMaybeMessage<::run_cap_request>(Arena*);
template<> ::run_cap_response* Arena::CreateMaybeMessage<::run_cap_response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class empty_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:empty_request) */ {
 public:
  inline empty_request() : empty_request(nullptr) {}
  virtual ~empty_request();

  empty_request(const empty_request& from);
  empty_request(empty_request&& from) noexcept
    : empty_request() {
    *this = ::std::move(from);
  }

  inline empty_request& operator=(const empty_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline empty_request& operator=(empty_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const empty_request& default_instance();

  static inline const empty_request* internal_default_instance() {
    return reinterpret_cast<const empty_request*>(
               &_empty_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(empty_request& a, empty_request& b) {
    a.Swap(&b);
  }
  inline void Swap(empty_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(empty_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline empty_request* New() const final {
    return CreateMaybeMessage<empty_request>(nullptr);
  }

  empty_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<empty_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const empty_request& from);
  void MergeFrom(const empty_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(empty_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "empty_request";
  }
  protected:
  explicit empty_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tele_5fservice_2eproto);
    return ::descriptor_table_tele_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolVersionFieldNumber = 1,
  };
  // string protocol_version = 1;
  void clear_protocol_version();
  const std::string& protocol_version() const;
  void set_protocol_version(const std::string& value);
  void set_protocol_version(std::string&& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  std::string* mutable_protocol_version();
  std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* protocol_version);
  private:
  const std::string& _internal_protocol_version() const;
  void _internal_set_protocol_version(const std::string& value);
  std::string* _internal_mutable_protocol_version();
  public:

  // @@protoc_insertion_point(class_scope:empty_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tele_5fservice_2eproto;
};
// -------------------------------------------------------------------

class getif_response_if_info_entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:getif_response.if_info_entry) */ {
 public:
  inline getif_response_if_info_entry() : getif_response_if_info_entry(nullptr) {}
  virtual ~getif_response_if_info_entry();

  getif_response_if_info_entry(const getif_response_if_info_entry& from);
  getif_response_if_info_entry(getif_response_if_info_entry&& from) noexcept
    : getif_response_if_info_entry() {
    *this = ::std::move(from);
  }

  inline getif_response_if_info_entry& operator=(const getif_response_if_info_entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline getif_response_if_info_entry& operator=(getif_response_if_info_entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getif_response_if_info_entry& default_instance();

  static inline const getif_response_if_info_entry* internal_default_instance() {
    return reinterpret_cast<const getif_response_if_info_entry*>(
               &_getif_response_if_info_entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(getif_response_if_info_entry& a, getif_response_if_info_entry& b) {
    a.Swap(&b);
  }
  inline void Swap(getif_response_if_info_entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getif_response_if_info_entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getif_response_if_info_entry* New() const final {
    return CreateMaybeMessage<getif_response_if_info_entry>(nullptr);
  }

  getif_response_if_info_entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getif_response_if_info_entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getif_response_if_info_entry& from);
  void MergeFrom(const getif_response_if_info_entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getif_response_if_info_entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "getif_response.if_info_entry";
  }
  protected:
  explicit getif_response_if_info_entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tele_5fservice_2eproto);
    return ::descriptor_table_tele_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIfNameFieldNumber = 1,
    kIfDescriptionFieldNumber = 2,
  };
  // string if_name = 1;
  void clear_if_name();
  const std::string& if_name() const;
  void set_if_name(const std::string& value);
  void set_if_name(std::string&& value);
  void set_if_name(const char* value);
  void set_if_name(const char* value, size_t size);
  std::string* mutable_if_name();
  std::string* release_if_name();
  void set_allocated_if_name(std::string* if_name);
  private:
  const std::string& _internal_if_name() const;
  void _internal_set_if_name(const std::string& value);
  std::string* _internal_mutable_if_name();
  public:

  // string if_description = 2;
  void clear_if_description();
  const std::string& if_description() const;
  void set_if_description(const std::string& value);
  void set_if_description(std::string&& value);
  void set_if_description(const char* value);
  void set_if_description(const char* value, size_t size);
  std::string* mutable_if_description();
  std::string* release_if_description();
  void set_allocated_if_description(std::string* if_description);
  private:
  const std::string& _internal_if_description() const;
  void _internal_set_if_description(const std::string& value);
  std::string* _internal_mutable_if_description();
  public:

  // @@protoc_insertion_point(class_scope:getif_response.if_info_entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr if_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr if_description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tele_5fservice_2eproto;
};
// -------------------------------------------------------------------

class getif_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:getif_response) */ {
 public:
  inline getif_response() : getif_response(nullptr) {}
  virtual ~getif_response();

  getif_response(const getif_response& from);
  getif_response(getif_response&& from) noexcept
    : getif_response() {
    *this = ::std::move(from);
  }

  inline getif_response& operator=(const getif_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline getif_response& operator=(getif_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const getif_response& default_instance();

  static inline const getif_response* internal_default_instance() {
    return reinterpret_cast<const getif_response*>(
               &_getif_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(getif_response& a, getif_response& b) {
    a.Swap(&b);
  }
  inline void Swap(getif_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(getif_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline getif_response* New() const final {
    return CreateMaybeMessage<getif_response>(nullptr);
  }

  getif_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<getif_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const getif_response& from);
  void MergeFrom(const getif_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(getif_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "getif_response";
  }
  protected:
  explicit getif_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tele_5fservice_2eproto);
    return ::descriptor_table_tele_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef getif_response_if_info_entry if_info_entry;

  // accessors -------------------------------------------------------

  enum : int {
    kInterfaceListFieldNumber = 2,
    kProtocolVersionFieldNumber = 1,
  };
  // repeated .getif_response.if_info_entry interface_list = 2;
  int interface_list_size() const;
  private:
  int _internal_interface_list_size() const;
  public:
  void clear_interface_list();
  ::getif_response_if_info_entry* mutable_interface_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::getif_response_if_info_entry >*
      mutable_interface_list();
  private:
  const ::getif_response_if_info_entry& _internal_interface_list(int index) const;
  ::getif_response_if_info_entry* _internal_add_interface_list();
  public:
  const ::getif_response_if_info_entry& interface_list(int index) const;
  ::getif_response_if_info_entry* add_interface_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::getif_response_if_info_entry >&
      interface_list() const;

  // string protocol_version = 1;
  void clear_protocol_version();
  const std::string& protocol_version() const;
  void set_protocol_version(const std::string& value);
  void set_protocol_version(std::string&& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  std::string* mutable_protocol_version();
  std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* protocol_version);
  private:
  const std::string& _internal_protocol_version() const;
  void _internal_set_protocol_version(const std::string& value);
  std::string* _internal_mutable_protocol_version();
  public:

  // @@protoc_insertion_point(class_scope:getif_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::getif_response_if_info_entry > interface_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tele_5fservice_2eproto;
};
// -------------------------------------------------------------------

class run_cap_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:run_cap_request) */ {
 public:
  inline run_cap_request() : run_cap_request(nullptr) {}
  virtual ~run_cap_request();

  run_cap_request(const run_cap_request& from);
  run_cap_request(run_cap_request&& from) noexcept
    : run_cap_request() {
    *this = ::std::move(from);
  }

  inline run_cap_request& operator=(const run_cap_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline run_cap_request& operator=(run_cap_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const run_cap_request& default_instance();

  static inline const run_cap_request* internal_default_instance() {
    return reinterpret_cast<const run_cap_request*>(
               &_run_cap_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(run_cap_request& a, run_cap_request& b) {
    a.Swap(&b);
  }
  inline void Swap(run_cap_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(run_cap_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline run_cap_request* New() const final {
    return CreateMaybeMessage<run_cap_request>(nullptr);
  }

  run_cap_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<run_cap_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const run_cap_request& from);
  void MergeFrom(const run_cap_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(run_cap_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "run_cap_request";
  }
  protected:
  explicit run_cap_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tele_5fservice_2eproto);
    return ::descriptor_table_tele_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolVersionFieldNumber = 1,
    kIfNameFieldNumber = 2,
    kPktCountFieldNumber = 3,
    kKFieldNumber = 4,
  };
  // string protocol_version = 1;
  void clear_protocol_version();
  const std::string& protocol_version() const;
  void set_protocol_version(const std::string& value);
  void set_protocol_version(std::string&& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  std::string* mutable_protocol_version();
  std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* protocol_version);
  private:
  const std::string& _internal_protocol_version() const;
  void _internal_set_protocol_version(const std::string& value);
  std::string* _internal_mutable_protocol_version();
  public:

  // string if_name = 2;
  void clear_if_name();
  const std::string& if_name() const;
  void set_if_name(const std::string& value);
  void set_if_name(std::string&& value);
  void set_if_name(const char* value);
  void set_if_name(const char* value, size_t size);
  std::string* mutable_if_name();
  std::string* release_if_name();
  void set_allocated_if_name(std::string* if_name);
  private:
  const std::string& _internal_if_name() const;
  void _internal_set_if_name(const std::string& value);
  std::string* _internal_mutable_if_name();
  public:

  // int64 pkt_count = 3;
  void clear_pkt_count();
  ::PROTOBUF_NAMESPACE_ID::int64 pkt_count() const;
  void set_pkt_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pkt_count() const;
  void _internal_set_pkt_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 k = 4;
  void clear_k();
  ::PROTOBUF_NAMESPACE_ID::int32 k() const;
  void set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_k() const;
  void _internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:run_cap_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr if_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 pkt_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 k_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tele_5fservice_2eproto;
};
// -------------------------------------------------------------------

class run_cap_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:run_cap_response) */ {
 public:
  inline run_cap_response() : run_cap_response(nullptr) {}
  virtual ~run_cap_response();

  run_cap_response(const run_cap_response& from);
  run_cap_response(run_cap_response&& from) noexcept
    : run_cap_response() {
    *this = ::std::move(from);
  }

  inline run_cap_response& operator=(const run_cap_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline run_cap_response& operator=(run_cap_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const run_cap_response& default_instance();

  static inline const run_cap_response* internal_default_instance() {
    return reinterpret_cast<const run_cap_response*>(
               &_run_cap_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(run_cap_response& a, run_cap_response& b) {
    a.Swap(&b);
  }
  inline void Swap(run_cap_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(run_cap_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline run_cap_response* New() const final {
    return CreateMaybeMessage<run_cap_response>(nullptr);
  }

  run_cap_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<run_cap_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const run_cap_response& from);
  void MergeFrom(const run_cap_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(run_cap_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "run_cap_response";
  }
  protected:
  explicit run_cap_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tele_5fservice_2eproto);
    return ::descriptor_table_tele_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolVersionFieldNumber = 1,
    kIsStartedFieldNumber = 2,
  };
  // string protocol_version = 1;
  void clear_protocol_version();
  const std::string& protocol_version() const;
  void set_protocol_version(const std::string& value);
  void set_protocol_version(std::string&& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  std::string* mutable_protocol_version();
  std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* protocol_version);
  private:
  const std::string& _internal_protocol_version() const;
  void _internal_set_protocol_version(const std::string& value);
  std::string* _internal_mutable_protocol_version();
  public:

  // bool is_started = 2;
  void clear_is_started();
  bool is_started() const;
  void set_is_started(bool value);
  private:
  bool _internal_is_started() const;
  void _internal_set_is_started(bool value);
  public:

  // @@protoc_insertion_point(class_scope:run_cap_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_version_;
  bool is_started_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tele_5fservice_2eproto;
};
// -------------------------------------------------------------------

class get_cap_status_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:get_cap_status_response) */ {
 public:
  inline get_cap_status_response() : get_cap_status_response(nullptr) {}
  virtual ~get_cap_status_response();

  get_cap_status_response(const get_cap_status_response& from);
  get_cap_status_response(get_cap_status_response&& from) noexcept
    : get_cap_status_response() {
    *this = ::std::move(from);
  }

  inline get_cap_status_response& operator=(const get_cap_status_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_cap_status_response& operator=(get_cap_status_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_cap_status_response& default_instance();

  static inline const get_cap_status_response* internal_default_instance() {
    return reinterpret_cast<const get_cap_status_response*>(
               &_get_cap_status_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(get_cap_status_response& a, get_cap_status_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_cap_status_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_cap_status_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_cap_status_response* New() const final {
    return CreateMaybeMessage<get_cap_status_response>(nullptr);
  }

  get_cap_status_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_cap_status_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_cap_status_response& from);
  void MergeFrom(const get_cap_status_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_cap_status_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "get_cap_status_response";
  }
  protected:
  explicit get_cap_status_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tele_5fservice_2eproto);
    return ::descriptor_table_tele_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolVersionFieldNumber = 1,
    kCapturedPktCountFieldNumber = 3,
    kIsFinishedFieldNumber = 2,
  };
  // string protocol_version = 1;
  void clear_protocol_version();
  const std::string& protocol_version() const;
  void set_protocol_version(const std::string& value);
  void set_protocol_version(std::string&& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  std::string* mutable_protocol_version();
  std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* protocol_version);
  private:
  const std::string& _internal_protocol_version() const;
  void _internal_set_protocol_version(const std::string& value);
  std::string* _internal_mutable_protocol_version();
  public:

  // int64 captured_pkt_count = 3;
  void clear_captured_pkt_count();
  ::PROTOBUF_NAMESPACE_ID::int64 captured_pkt_count() const;
  void set_captured_pkt_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_captured_pkt_count() const;
  void _internal_set_captured_pkt_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_finished = 2;
  void clear_is_finished();
  bool is_finished() const;
  void set_is_finished(bool value);
  private:
  bool _internal_is_finished() const;
  void _internal_set_is_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:get_cap_status_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_version_;
  ::PROTOBUF_NAMESPACE_ID::int64 captured_pkt_count_;
  bool is_finished_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tele_5fservice_2eproto;
};
// -------------------------------------------------------------------

class get_topk_result_response_topk_result_entry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:get_topk_result_response.topk_result_entry) */ {
 public:
  inline get_topk_result_response_topk_result_entry() : get_topk_result_response_topk_result_entry(nullptr) {}
  virtual ~get_topk_result_response_topk_result_entry();

  get_topk_result_response_topk_result_entry(const get_topk_result_response_topk_result_entry& from);
  get_topk_result_response_topk_result_entry(get_topk_result_response_topk_result_entry&& from) noexcept
    : get_topk_result_response_topk_result_entry() {
    *this = ::std::move(from);
  }

  inline get_topk_result_response_topk_result_entry& operator=(const get_topk_result_response_topk_result_entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_topk_result_response_topk_result_entry& operator=(get_topk_result_response_topk_result_entry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_topk_result_response_topk_result_entry& default_instance();

  static inline const get_topk_result_response_topk_result_entry* internal_default_instance() {
    return reinterpret_cast<const get_topk_result_response_topk_result_entry*>(
               &_get_topk_result_response_topk_result_entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(get_topk_result_response_topk_result_entry& a, get_topk_result_response_topk_result_entry& b) {
    a.Swap(&b);
  }
  inline void Swap(get_topk_result_response_topk_result_entry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_topk_result_response_topk_result_entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_topk_result_response_topk_result_entry* New() const final {
    return CreateMaybeMessage<get_topk_result_response_topk_result_entry>(nullptr);
  }

  get_topk_result_response_topk_result_entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_topk_result_response_topk_result_entry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_topk_result_response_topk_result_entry& from);
  void MergeFrom(const get_topk_result_response_topk_result_entry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_topk_result_response_topk_result_entry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "get_topk_result_response.topk_result_entry";
  }
  protected:
  explicit get_topk_result_response_topk_result_entry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tele_5fservice_2eproto);
    return ::descriptor_table_tele_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlowDescriptionFieldNumber = 2,
    kFlowCountFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string flow_description = 2;
  void clear_flow_description();
  const std::string& flow_description() const;
  void set_flow_description(const std::string& value);
  void set_flow_description(std::string&& value);
  void set_flow_description(const char* value);
  void set_flow_description(const char* value, size_t size);
  std::string* mutable_flow_description();
  std::string* release_flow_description();
  void set_allocated_flow_description(std::string* flow_description);
  private:
  const std::string& _internal_flow_description() const;
  void _internal_set_flow_description(const std::string& value);
  std::string* _internal_mutable_flow_description();
  public:

  // int64 flow_count = 3;
  void clear_flow_count();
  ::PROTOBUF_NAMESPACE_ID::int64 flow_count() const;
  void set_flow_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flow_count() const;
  void _internal_set_flow_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:get_topk_result_response.topk_result_entry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flow_description_;
  ::PROTOBUF_NAMESPACE_ID::int64 flow_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tele_5fservice_2eproto;
};
// -------------------------------------------------------------------

class get_topk_result_response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:get_topk_result_response) */ {
 public:
  inline get_topk_result_response() : get_topk_result_response(nullptr) {}
  virtual ~get_topk_result_response();

  get_topk_result_response(const get_topk_result_response& from);
  get_topk_result_response(get_topk_result_response&& from) noexcept
    : get_topk_result_response() {
    *this = ::std::move(from);
  }

  inline get_topk_result_response& operator=(const get_topk_result_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline get_topk_result_response& operator=(get_topk_result_response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const get_topk_result_response& default_instance();

  static inline const get_topk_result_response* internal_default_instance() {
    return reinterpret_cast<const get_topk_result_response*>(
               &_get_topk_result_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(get_topk_result_response& a, get_topk_result_response& b) {
    a.Swap(&b);
  }
  inline void Swap(get_topk_result_response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(get_topk_result_response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline get_topk_result_response* New() const final {
    return CreateMaybeMessage<get_topk_result_response>(nullptr);
  }

  get_topk_result_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<get_topk_result_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const get_topk_result_response& from);
  void MergeFrom(const get_topk_result_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(get_topk_result_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "get_topk_result_response";
  }
  protected:
  explicit get_topk_result_response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_tele_5fservice_2eproto);
    return ::descriptor_table_tele_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef get_topk_result_response_topk_result_entry topk_result_entry;

  // accessors -------------------------------------------------------

  enum : int {
    kTopkResultsFieldNumber = 3,
    kProtocolVersionFieldNumber = 1,
    kIsFinishedFieldNumber = 2,
  };
  // repeated .get_topk_result_response.topk_result_entry topk_results = 3;
  int topk_results_size() const;
  private:
  int _internal_topk_results_size() const;
  public:
  void clear_topk_results();
  ::get_topk_result_response_topk_result_entry* mutable_topk_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::get_topk_result_response_topk_result_entry >*
      mutable_topk_results();
  private:
  const ::get_topk_result_response_topk_result_entry& _internal_topk_results(int index) const;
  ::get_topk_result_response_topk_result_entry* _internal_add_topk_results();
  public:
  const ::get_topk_result_response_topk_result_entry& topk_results(int index) const;
  ::get_topk_result_response_topk_result_entry* add_topk_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::get_topk_result_response_topk_result_entry >&
      topk_results() const;

  // string protocol_version = 1;
  void clear_protocol_version();
  const std::string& protocol_version() const;
  void set_protocol_version(const std::string& value);
  void set_protocol_version(std::string&& value);
  void set_protocol_version(const char* value);
  void set_protocol_version(const char* value, size_t size);
  std::string* mutable_protocol_version();
  std::string* release_protocol_version();
  void set_allocated_protocol_version(std::string* protocol_version);
  private:
  const std::string& _internal_protocol_version() const;
  void _internal_set_protocol_version(const std::string& value);
  std::string* _internal_mutable_protocol_version();
  public:

  // bool is_finished = 2;
  void clear_is_finished();
  bool is_finished() const;
  void set_is_finished(bool value);
  private:
  bool _internal_is_finished() const;
  void _internal_set_is_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:get_topk_result_response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::get_topk_result_response_topk_result_entry > topk_results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_version_;
  bool is_finished_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tele_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// empty_request

// string protocol_version = 1;
inline void empty_request::clear_protocol_version() {
  protocol_version_.ClearToEmpty();
}
inline const std::string& empty_request::protocol_version() const {
  // @@protoc_insertion_point(field_get:empty_request.protocol_version)
  return _internal_protocol_version();
}
inline void empty_request::set_protocol_version(const std::string& value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:empty_request.protocol_version)
}
inline std::string* empty_request::mutable_protocol_version() {
  // @@protoc_insertion_point(field_mutable:empty_request.protocol_version)
  return _internal_mutable_protocol_version();
}
inline const std::string& empty_request::_internal_protocol_version() const {
  return protocol_version_.Get();
}
inline void empty_request::_internal_set_protocol_version(const std::string& value) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void empty_request::set_protocol_version(std::string&& value) {
  
  protocol_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:empty_request.protocol_version)
}
inline void empty_request::set_protocol_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:empty_request.protocol_version)
}
inline void empty_request::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:empty_request.protocol_version)
}
inline std::string* empty_request::_internal_mutable_protocol_version() {
  
  return protocol_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* empty_request::release_protocol_version() {
  // @@protoc_insertion_point(field_release:empty_request.protocol_version)
  return protocol_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void empty_request::set_allocated_protocol_version(std::string* protocol_version) {
  if (protocol_version != nullptr) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:empty_request.protocol_version)
}

// -------------------------------------------------------------------

// getif_response_if_info_entry

// string if_name = 1;
inline void getif_response_if_info_entry::clear_if_name() {
  if_name_.ClearToEmpty();
}
inline const std::string& getif_response_if_info_entry::if_name() const {
  // @@protoc_insertion_point(field_get:getif_response.if_info_entry.if_name)
  return _internal_if_name();
}
inline void getif_response_if_info_entry::set_if_name(const std::string& value) {
  _internal_set_if_name(value);
  // @@protoc_insertion_point(field_set:getif_response.if_info_entry.if_name)
}
inline std::string* getif_response_if_info_entry::mutable_if_name() {
  // @@protoc_insertion_point(field_mutable:getif_response.if_info_entry.if_name)
  return _internal_mutable_if_name();
}
inline const std::string& getif_response_if_info_entry::_internal_if_name() const {
  return if_name_.Get();
}
inline void getif_response_if_info_entry::_internal_set_if_name(const std::string& value) {
  
  if_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getif_response_if_info_entry::set_if_name(std::string&& value) {
  
  if_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:getif_response.if_info_entry.if_name)
}
inline void getif_response_if_info_entry::set_if_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  if_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:getif_response.if_info_entry.if_name)
}
inline void getif_response_if_info_entry::set_if_name(const char* value,
    size_t size) {
  
  if_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:getif_response.if_info_entry.if_name)
}
inline std::string* getif_response_if_info_entry::_internal_mutable_if_name() {
  
  return if_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getif_response_if_info_entry::release_if_name() {
  // @@protoc_insertion_point(field_release:getif_response.if_info_entry.if_name)
  return if_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getif_response_if_info_entry::set_allocated_if_name(std::string* if_name) {
  if (if_name != nullptr) {
    
  } else {
    
  }
  if_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), if_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:getif_response.if_info_entry.if_name)
}

// string if_description = 2;
inline void getif_response_if_info_entry::clear_if_description() {
  if_description_.ClearToEmpty();
}
inline const std::string& getif_response_if_info_entry::if_description() const {
  // @@protoc_insertion_point(field_get:getif_response.if_info_entry.if_description)
  return _internal_if_description();
}
inline void getif_response_if_info_entry::set_if_description(const std::string& value) {
  _internal_set_if_description(value);
  // @@protoc_insertion_point(field_set:getif_response.if_info_entry.if_description)
}
inline std::string* getif_response_if_info_entry::mutable_if_description() {
  // @@protoc_insertion_point(field_mutable:getif_response.if_info_entry.if_description)
  return _internal_mutable_if_description();
}
inline const std::string& getif_response_if_info_entry::_internal_if_description() const {
  return if_description_.Get();
}
inline void getif_response_if_info_entry::_internal_set_if_description(const std::string& value) {
  
  if_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getif_response_if_info_entry::set_if_description(std::string&& value) {
  
  if_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:getif_response.if_info_entry.if_description)
}
inline void getif_response_if_info_entry::set_if_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  if_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:getif_response.if_info_entry.if_description)
}
inline void getif_response_if_info_entry::set_if_description(const char* value,
    size_t size) {
  
  if_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:getif_response.if_info_entry.if_description)
}
inline std::string* getif_response_if_info_entry::_internal_mutable_if_description() {
  
  return if_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getif_response_if_info_entry::release_if_description() {
  // @@protoc_insertion_point(field_release:getif_response.if_info_entry.if_description)
  return if_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getif_response_if_info_entry::set_allocated_if_description(std::string* if_description) {
  if (if_description != nullptr) {
    
  } else {
    
  }
  if_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), if_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:getif_response.if_info_entry.if_description)
}

// -------------------------------------------------------------------

// getif_response

// string protocol_version = 1;
inline void getif_response::clear_protocol_version() {
  protocol_version_.ClearToEmpty();
}
inline const std::string& getif_response::protocol_version() const {
  // @@protoc_insertion_point(field_get:getif_response.protocol_version)
  return _internal_protocol_version();
}
inline void getif_response::set_protocol_version(const std::string& value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:getif_response.protocol_version)
}
inline std::string* getif_response::mutable_protocol_version() {
  // @@protoc_insertion_point(field_mutable:getif_response.protocol_version)
  return _internal_mutable_protocol_version();
}
inline const std::string& getif_response::_internal_protocol_version() const {
  return protocol_version_.Get();
}
inline void getif_response::_internal_set_protocol_version(const std::string& value) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void getif_response::set_protocol_version(std::string&& value) {
  
  protocol_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:getif_response.protocol_version)
}
inline void getif_response::set_protocol_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:getif_response.protocol_version)
}
inline void getif_response::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:getif_response.protocol_version)
}
inline std::string* getif_response::_internal_mutable_protocol_version() {
  
  return protocol_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* getif_response::release_protocol_version() {
  // @@protoc_insertion_point(field_release:getif_response.protocol_version)
  return protocol_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void getif_response::set_allocated_protocol_version(std::string* protocol_version) {
  if (protocol_version != nullptr) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:getif_response.protocol_version)
}

// repeated .getif_response.if_info_entry interface_list = 2;
inline int getif_response::_internal_interface_list_size() const {
  return interface_list_.size();
}
inline int getif_response::interface_list_size() const {
  return _internal_interface_list_size();
}
inline void getif_response::clear_interface_list() {
  interface_list_.Clear();
}
inline ::getif_response_if_info_entry* getif_response::mutable_interface_list(int index) {
  // @@protoc_insertion_point(field_mutable:getif_response.interface_list)
  return interface_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::getif_response_if_info_entry >*
getif_response::mutable_interface_list() {
  // @@protoc_insertion_point(field_mutable_list:getif_response.interface_list)
  return &interface_list_;
}
inline const ::getif_response_if_info_entry& getif_response::_internal_interface_list(int index) const {
  return interface_list_.Get(index);
}
inline const ::getif_response_if_info_entry& getif_response::interface_list(int index) const {
  // @@protoc_insertion_point(field_get:getif_response.interface_list)
  return _internal_interface_list(index);
}
inline ::getif_response_if_info_entry* getif_response::_internal_add_interface_list() {
  return interface_list_.Add();
}
inline ::getif_response_if_info_entry* getif_response::add_interface_list() {
  // @@protoc_insertion_point(field_add:getif_response.interface_list)
  return _internal_add_interface_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::getif_response_if_info_entry >&
getif_response::interface_list() const {
  // @@protoc_insertion_point(field_list:getif_response.interface_list)
  return interface_list_;
}

// -------------------------------------------------------------------

// run_cap_request

// string protocol_version = 1;
inline void run_cap_request::clear_protocol_version() {
  protocol_version_.ClearToEmpty();
}
inline const std::string& run_cap_request::protocol_version() const {
  // @@protoc_insertion_point(field_get:run_cap_request.protocol_version)
  return _internal_protocol_version();
}
inline void run_cap_request::set_protocol_version(const std::string& value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:run_cap_request.protocol_version)
}
inline std::string* run_cap_request::mutable_protocol_version() {
  // @@protoc_insertion_point(field_mutable:run_cap_request.protocol_version)
  return _internal_mutable_protocol_version();
}
inline const std::string& run_cap_request::_internal_protocol_version() const {
  return protocol_version_.Get();
}
inline void run_cap_request::_internal_set_protocol_version(const std::string& value) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void run_cap_request::set_protocol_version(std::string&& value) {
  
  protocol_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:run_cap_request.protocol_version)
}
inline void run_cap_request::set_protocol_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:run_cap_request.protocol_version)
}
inline void run_cap_request::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:run_cap_request.protocol_version)
}
inline std::string* run_cap_request::_internal_mutable_protocol_version() {
  
  return protocol_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* run_cap_request::release_protocol_version() {
  // @@protoc_insertion_point(field_release:run_cap_request.protocol_version)
  return protocol_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void run_cap_request::set_allocated_protocol_version(std::string* protocol_version) {
  if (protocol_version != nullptr) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:run_cap_request.protocol_version)
}

// string if_name = 2;
inline void run_cap_request::clear_if_name() {
  if_name_.ClearToEmpty();
}
inline const std::string& run_cap_request::if_name() const {
  // @@protoc_insertion_point(field_get:run_cap_request.if_name)
  return _internal_if_name();
}
inline void run_cap_request::set_if_name(const std::string& value) {
  _internal_set_if_name(value);
  // @@protoc_insertion_point(field_set:run_cap_request.if_name)
}
inline std::string* run_cap_request::mutable_if_name() {
  // @@protoc_insertion_point(field_mutable:run_cap_request.if_name)
  return _internal_mutable_if_name();
}
inline const std::string& run_cap_request::_internal_if_name() const {
  return if_name_.Get();
}
inline void run_cap_request::_internal_set_if_name(const std::string& value) {
  
  if_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void run_cap_request::set_if_name(std::string&& value) {
  
  if_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:run_cap_request.if_name)
}
inline void run_cap_request::set_if_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  if_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:run_cap_request.if_name)
}
inline void run_cap_request::set_if_name(const char* value,
    size_t size) {
  
  if_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:run_cap_request.if_name)
}
inline std::string* run_cap_request::_internal_mutable_if_name() {
  
  return if_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* run_cap_request::release_if_name() {
  // @@protoc_insertion_point(field_release:run_cap_request.if_name)
  return if_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void run_cap_request::set_allocated_if_name(std::string* if_name) {
  if (if_name != nullptr) {
    
  } else {
    
  }
  if_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), if_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:run_cap_request.if_name)
}

// int64 pkt_count = 3;
inline void run_cap_request::clear_pkt_count() {
  pkt_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 run_cap_request::_internal_pkt_count() const {
  return pkt_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 run_cap_request::pkt_count() const {
  // @@protoc_insertion_point(field_get:run_cap_request.pkt_count)
  return _internal_pkt_count();
}
inline void run_cap_request::_internal_set_pkt_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pkt_count_ = value;
}
inline void run_cap_request::set_pkt_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pkt_count(value);
  // @@protoc_insertion_point(field_set:run_cap_request.pkt_count)
}

// int32 k = 4;
inline void run_cap_request::clear_k() {
  k_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 run_cap_request::_internal_k() const {
  return k_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 run_cap_request::k() const {
  // @@protoc_insertion_point(field_get:run_cap_request.k)
  return _internal_k();
}
inline void run_cap_request::_internal_set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  k_ = value;
}
inline void run_cap_request::set_k(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_k(value);
  // @@protoc_insertion_point(field_set:run_cap_request.k)
}

// -------------------------------------------------------------------

// run_cap_response

// string protocol_version = 1;
inline void run_cap_response::clear_protocol_version() {
  protocol_version_.ClearToEmpty();
}
inline const std::string& run_cap_response::protocol_version() const {
  // @@protoc_insertion_point(field_get:run_cap_response.protocol_version)
  return _internal_protocol_version();
}
inline void run_cap_response::set_protocol_version(const std::string& value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:run_cap_response.protocol_version)
}
inline std::string* run_cap_response::mutable_protocol_version() {
  // @@protoc_insertion_point(field_mutable:run_cap_response.protocol_version)
  return _internal_mutable_protocol_version();
}
inline const std::string& run_cap_response::_internal_protocol_version() const {
  return protocol_version_.Get();
}
inline void run_cap_response::_internal_set_protocol_version(const std::string& value) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void run_cap_response::set_protocol_version(std::string&& value) {
  
  protocol_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:run_cap_response.protocol_version)
}
inline void run_cap_response::set_protocol_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:run_cap_response.protocol_version)
}
inline void run_cap_response::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:run_cap_response.protocol_version)
}
inline std::string* run_cap_response::_internal_mutable_protocol_version() {
  
  return protocol_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* run_cap_response::release_protocol_version() {
  // @@protoc_insertion_point(field_release:run_cap_response.protocol_version)
  return protocol_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void run_cap_response::set_allocated_protocol_version(std::string* protocol_version) {
  if (protocol_version != nullptr) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:run_cap_response.protocol_version)
}

// bool is_started = 2;
inline void run_cap_response::clear_is_started() {
  is_started_ = false;
}
inline bool run_cap_response::_internal_is_started() const {
  return is_started_;
}
inline bool run_cap_response::is_started() const {
  // @@protoc_insertion_point(field_get:run_cap_response.is_started)
  return _internal_is_started();
}
inline void run_cap_response::_internal_set_is_started(bool value) {
  
  is_started_ = value;
}
inline void run_cap_response::set_is_started(bool value) {
  _internal_set_is_started(value);
  // @@protoc_insertion_point(field_set:run_cap_response.is_started)
}

// -------------------------------------------------------------------

// get_cap_status_response

// string protocol_version = 1;
inline void get_cap_status_response::clear_protocol_version() {
  protocol_version_.ClearToEmpty();
}
inline const std::string& get_cap_status_response::protocol_version() const {
  // @@protoc_insertion_point(field_get:get_cap_status_response.protocol_version)
  return _internal_protocol_version();
}
inline void get_cap_status_response::set_protocol_version(const std::string& value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:get_cap_status_response.protocol_version)
}
inline std::string* get_cap_status_response::mutable_protocol_version() {
  // @@protoc_insertion_point(field_mutable:get_cap_status_response.protocol_version)
  return _internal_mutable_protocol_version();
}
inline const std::string& get_cap_status_response::_internal_protocol_version() const {
  return protocol_version_.Get();
}
inline void get_cap_status_response::_internal_set_protocol_version(const std::string& value) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_cap_status_response::set_protocol_version(std::string&& value) {
  
  protocol_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:get_cap_status_response.protocol_version)
}
inline void get_cap_status_response::set_protocol_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:get_cap_status_response.protocol_version)
}
inline void get_cap_status_response::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:get_cap_status_response.protocol_version)
}
inline std::string* get_cap_status_response::_internal_mutable_protocol_version() {
  
  return protocol_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_cap_status_response::release_protocol_version() {
  // @@protoc_insertion_point(field_release:get_cap_status_response.protocol_version)
  return protocol_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_cap_status_response::set_allocated_protocol_version(std::string* protocol_version) {
  if (protocol_version != nullptr) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:get_cap_status_response.protocol_version)
}

// bool is_finished = 2;
inline void get_cap_status_response::clear_is_finished() {
  is_finished_ = false;
}
inline bool get_cap_status_response::_internal_is_finished() const {
  return is_finished_;
}
inline bool get_cap_status_response::is_finished() const {
  // @@protoc_insertion_point(field_get:get_cap_status_response.is_finished)
  return _internal_is_finished();
}
inline void get_cap_status_response::_internal_set_is_finished(bool value) {
  
  is_finished_ = value;
}
inline void get_cap_status_response::set_is_finished(bool value) {
  _internal_set_is_finished(value);
  // @@protoc_insertion_point(field_set:get_cap_status_response.is_finished)
}

// int64 captured_pkt_count = 3;
inline void get_cap_status_response::clear_captured_pkt_count() {
  captured_pkt_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 get_cap_status_response::_internal_captured_pkt_count() const {
  return captured_pkt_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 get_cap_status_response::captured_pkt_count() const {
  // @@protoc_insertion_point(field_get:get_cap_status_response.captured_pkt_count)
  return _internal_captured_pkt_count();
}
inline void get_cap_status_response::_internal_set_captured_pkt_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  captured_pkt_count_ = value;
}
inline void get_cap_status_response::set_captured_pkt_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_captured_pkt_count(value);
  // @@protoc_insertion_point(field_set:get_cap_status_response.captured_pkt_count)
}

// -------------------------------------------------------------------

// get_topk_result_response_topk_result_entry

// int32 id = 1;
inline void get_topk_result_response_topk_result_entry::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_topk_result_response_topk_result_entry::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 get_topk_result_response_topk_result_entry::id() const {
  // @@protoc_insertion_point(field_get:get_topk_result_response.topk_result_entry.id)
  return _internal_id();
}
inline void get_topk_result_response_topk_result_entry::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void get_topk_result_response_topk_result_entry::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:get_topk_result_response.topk_result_entry.id)
}

// string flow_description = 2;
inline void get_topk_result_response_topk_result_entry::clear_flow_description() {
  flow_description_.ClearToEmpty();
}
inline const std::string& get_topk_result_response_topk_result_entry::flow_description() const {
  // @@protoc_insertion_point(field_get:get_topk_result_response.topk_result_entry.flow_description)
  return _internal_flow_description();
}
inline void get_topk_result_response_topk_result_entry::set_flow_description(const std::string& value) {
  _internal_set_flow_description(value);
  // @@protoc_insertion_point(field_set:get_topk_result_response.topk_result_entry.flow_description)
}
inline std::string* get_topk_result_response_topk_result_entry::mutable_flow_description() {
  // @@protoc_insertion_point(field_mutable:get_topk_result_response.topk_result_entry.flow_description)
  return _internal_mutable_flow_description();
}
inline const std::string& get_topk_result_response_topk_result_entry::_internal_flow_description() const {
  return flow_description_.Get();
}
inline void get_topk_result_response_topk_result_entry::_internal_set_flow_description(const std::string& value) {
  
  flow_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_topk_result_response_topk_result_entry::set_flow_description(std::string&& value) {
  
  flow_description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:get_topk_result_response.topk_result_entry.flow_description)
}
inline void get_topk_result_response_topk_result_entry::set_flow_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flow_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:get_topk_result_response.topk_result_entry.flow_description)
}
inline void get_topk_result_response_topk_result_entry::set_flow_description(const char* value,
    size_t size) {
  
  flow_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:get_topk_result_response.topk_result_entry.flow_description)
}
inline std::string* get_topk_result_response_topk_result_entry::_internal_mutable_flow_description() {
  
  return flow_description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_topk_result_response_topk_result_entry::release_flow_description() {
  // @@protoc_insertion_point(field_release:get_topk_result_response.topk_result_entry.flow_description)
  return flow_description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_topk_result_response_topk_result_entry::set_allocated_flow_description(std::string* flow_description) {
  if (flow_description != nullptr) {
    
  } else {
    
  }
  flow_description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flow_description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:get_topk_result_response.topk_result_entry.flow_description)
}

// int64 flow_count = 3;
inline void get_topk_result_response_topk_result_entry::clear_flow_count() {
  flow_count_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 get_topk_result_response_topk_result_entry::_internal_flow_count() const {
  return flow_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 get_topk_result_response_topk_result_entry::flow_count() const {
  // @@protoc_insertion_point(field_get:get_topk_result_response.topk_result_entry.flow_count)
  return _internal_flow_count();
}
inline void get_topk_result_response_topk_result_entry::_internal_set_flow_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flow_count_ = value;
}
inline void get_topk_result_response_topk_result_entry::set_flow_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flow_count(value);
  // @@protoc_insertion_point(field_set:get_topk_result_response.topk_result_entry.flow_count)
}

// -------------------------------------------------------------------

// get_topk_result_response

// string protocol_version = 1;
inline void get_topk_result_response::clear_protocol_version() {
  protocol_version_.ClearToEmpty();
}
inline const std::string& get_topk_result_response::protocol_version() const {
  // @@protoc_insertion_point(field_get:get_topk_result_response.protocol_version)
  return _internal_protocol_version();
}
inline void get_topk_result_response::set_protocol_version(const std::string& value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:get_topk_result_response.protocol_version)
}
inline std::string* get_topk_result_response::mutable_protocol_version() {
  // @@protoc_insertion_point(field_mutable:get_topk_result_response.protocol_version)
  return _internal_mutable_protocol_version();
}
inline const std::string& get_topk_result_response::_internal_protocol_version() const {
  return protocol_version_.Get();
}
inline void get_topk_result_response::_internal_set_protocol_version(const std::string& value) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void get_topk_result_response::set_protocol_version(std::string&& value) {
  
  protocol_version_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:get_topk_result_response.protocol_version)
}
inline void get_topk_result_response::set_protocol_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:get_topk_result_response.protocol_version)
}
inline void get_topk_result_response::set_protocol_version(const char* value,
    size_t size) {
  
  protocol_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:get_topk_result_response.protocol_version)
}
inline std::string* get_topk_result_response::_internal_mutable_protocol_version() {
  
  return protocol_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* get_topk_result_response::release_protocol_version() {
  // @@protoc_insertion_point(field_release:get_topk_result_response.protocol_version)
  return protocol_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void get_topk_result_response::set_allocated_protocol_version(std::string* protocol_version) {
  if (protocol_version != nullptr) {
    
  } else {
    
  }
  protocol_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol_version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:get_topk_result_response.protocol_version)
}

// bool is_finished = 2;
inline void get_topk_result_response::clear_is_finished() {
  is_finished_ = false;
}
inline bool get_topk_result_response::_internal_is_finished() const {
  return is_finished_;
}
inline bool get_topk_result_response::is_finished() const {
  // @@protoc_insertion_point(field_get:get_topk_result_response.is_finished)
  return _internal_is_finished();
}
inline void get_topk_result_response::_internal_set_is_finished(bool value) {
  
  is_finished_ = value;
}
inline void get_topk_result_response::set_is_finished(bool value) {
  _internal_set_is_finished(value);
  // @@protoc_insertion_point(field_set:get_topk_result_response.is_finished)
}

// repeated .get_topk_result_response.topk_result_entry topk_results = 3;
inline int get_topk_result_response::_internal_topk_results_size() const {
  return topk_results_.size();
}
inline int get_topk_result_response::topk_results_size() const {
  return _internal_topk_results_size();
}
inline void get_topk_result_response::clear_topk_results() {
  topk_results_.Clear();
}
inline ::get_topk_result_response_topk_result_entry* get_topk_result_response::mutable_topk_results(int index) {
  // @@protoc_insertion_point(field_mutable:get_topk_result_response.topk_results)
  return topk_results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::get_topk_result_response_topk_result_entry >*
get_topk_result_response::mutable_topk_results() {
  // @@protoc_insertion_point(field_mutable_list:get_topk_result_response.topk_results)
  return &topk_results_;
}
inline const ::get_topk_result_response_topk_result_entry& get_topk_result_response::_internal_topk_results(int index) const {
  return topk_results_.Get(index);
}
inline const ::get_topk_result_response_topk_result_entry& get_topk_result_response::topk_results(int index) const {
  // @@protoc_insertion_point(field_get:get_topk_result_response.topk_results)
  return _internal_topk_results(index);
}
inline ::get_topk_result_response_topk_result_entry* get_topk_result_response::_internal_add_topk_results() {
  return topk_results_.Add();
}
inline ::get_topk_result_response_topk_result_entry* get_topk_result_response::add_topk_results() {
  // @@protoc_insertion_point(field_add:get_topk_result_response.topk_results)
  return _internal_add_topk_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::get_topk_result_response_topk_result_entry >&
get_topk_result_response::topk_results() const {
  // @@protoc_insertion_point(field_list:get_topk_result_response.topk_results)
  return topk_results_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tele_5fservice_2eproto
