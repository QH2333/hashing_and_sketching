# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tele_service_pb2 as tele__service__pb2


class tele_serviceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_if_list = channel.unary_unary(
                '/tele_service/get_if_list',
                request_serializer=tele__service__pb2.empty_request.SerializeToString,
                response_deserializer=tele__service__pb2.getif_response.FromString,
                )
        self.run_capture = channel.unary_unary(
                '/tele_service/run_capture',
                request_serializer=tele__service__pb2.run_cap_request.SerializeToString,
                response_deserializer=tele__service__pb2.run_cap_response.FromString,
                )
        self.get_cap_status = channel.unary_unary(
                '/tele_service/get_cap_status',
                request_serializer=tele__service__pb2.empty_request.SerializeToString,
                response_deserializer=tele__service__pb2.get_cap_status_response.FromString,
                )
        self.get_topk_result = channel.unary_unary(
                '/tele_service/get_topk_result',
                request_serializer=tele__service__pb2.empty_request.SerializeToString,
                response_deserializer=tele__service__pb2.get_topk_result_response.FromString,
                )


class tele_serviceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def get_if_list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def run_capture(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_cap_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_topk_result(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_tele_serviceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_if_list': grpc.unary_unary_rpc_method_handler(
                    servicer.get_if_list,
                    request_deserializer=tele__service__pb2.empty_request.FromString,
                    response_serializer=tele__service__pb2.getif_response.SerializeToString,
            ),
            'run_capture': grpc.unary_unary_rpc_method_handler(
                    servicer.run_capture,
                    request_deserializer=tele__service__pb2.run_cap_request.FromString,
                    response_serializer=tele__service__pb2.run_cap_response.SerializeToString,
            ),
            'get_cap_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_cap_status,
                    request_deserializer=tele__service__pb2.empty_request.FromString,
                    response_serializer=tele__service__pb2.get_cap_status_response.SerializeToString,
            ),
            'get_topk_result': grpc.unary_unary_rpc_method_handler(
                    servicer.get_topk_result,
                    request_deserializer=tele__service__pb2.empty_request.FromString,
                    response_serializer=tele__service__pb2.get_topk_result_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tele_service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class tele_service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def get_if_list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tele_service/get_if_list',
            tele__service__pb2.empty_request.SerializeToString,
            tele__service__pb2.getif_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def run_capture(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tele_service/run_capture',
            tele__service__pb2.run_cap_request.SerializeToString,
            tele__service__pb2.run_cap_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_cap_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tele_service/get_cap_status',
            tele__service__pb2.empty_request.SerializeToString,
            tele__service__pb2.get_cap_status_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_topk_result(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tele_service/get_topk_result',
            tele__service__pb2.empty_request.SerializeToString,
            tele__service__pb2.get_topk_result_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
